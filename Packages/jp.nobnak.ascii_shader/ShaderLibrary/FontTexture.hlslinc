#ifndef __FONT_TEXTURE_HLSLINC__
#define __FONT_TEXTURE_HLSLINC__


#define CHAR_WIDTH 16
#define CHAR_COUNT (CHAR_WIDTH * CHAR_WIDTH)

Texture2D _FontTex;
SamplerState sampler_FontTex;

float4 FontTexture_GetChar(float2 pos_uvc, float4 rect_uvc, uint char) {
	float2 uv = (pos_uvc - rect_uvc.xy) / rect_uvc.zw;
	if (any(bool4(uv < 0, uv > 1))) {
		return float4(0, 0, 0, 0);
	}

	char %= CHAR_COUNT;
	uint2 char_index = uint2(char % CHAR_WIDTH, (CHAR_WIDTH - 1) - char / CHAR_WIDTH);
	uv = (uv + char_index) / CHAR_WIDTH;
	return _FontTex.Sample(sampler_FontTex, uv);
}
float4 FontTexture_GetText(float2 pos_uvc, StructuredBuffer<uint> text, uint textLength) {
	float4 color = float4(0, 0, 0, 0);	
    float4 rect = float4(-0.25, 0, 1, 1);
	for (uint i = 0; i < textLength; i++) {
		uint ch = text[i];
		color += FontTexture_GetChar(pos_uvc, rect, ch);
        rect.x += rect.z * 0.5;
	}
	return color;
}
float4 FontTexture_GetText4(float2 pos_uvc, uint4 text) {
	float4 color = float4(0, 0, 0, 0);
	float4 rect = float4(-0.25, 0, 1, 1);
	color += FontTexture_GetChar(pos_uvc, rect, text.x);
	rect.x += rect.z * 0.5;
	color += FontTexture_GetChar(pos_uvc, rect, text.y);
	rect.x += rect.z * 0.5;
	color += FontTexture_GetChar(pos_uvc, rect, text.z);
	rect.x += rect.z * 0.5;
	color += FontTexture_GetChar(pos_uvc, rect, text.w);
	return color;
}

// 0-9, A-Z, a-z
uint3 FontTexture_IndexOf(uint offset) {
	return uint3(48, 65, 97) + offset % uint3(10, 26, 26);
}


#endif // __FONT_TEXTURE_HLSLINC__
